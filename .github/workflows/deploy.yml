name: Deployment Pipeline

# Trigger the workflow on pushes to the main branch (e.g., after a PR merge)
on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the latest code from the repository (for reference; not used on EC2)
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Deploy to the AWS EC2 Ubuntu instance via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}       # Your EC2 public IP or hostname
          username: ${{ secrets.EC2_USER }}     # EC2 username (commonly "ubuntu")
          key: ${{ secrets.EC2_SSH_KEY }}       # Your private SSH key (stored as a secret)
          port: 22
          script: |
            # Update package lists and install Docker and Git
            echo "Updating packages..."
            sudo apt update -y
            echo "Installing Docker and Git..."
            sudo apt install -y docker.io git

            # Create the application directory if it does not exist
            if [ ! -d "/home/ubuntu/fastapi-app" ]; then
              echo "Creating directory /home/ubuntu/fastapi-app..."
              mkdir -p /home/ubuntu/fastapi/fastapi-book-project
            fi

            # Change to the application directory
            cd /home/ubuntu/fastapi-app || { echo "Directory /home/ubuntu/fastapi-app not found"; exit 1; }

            # If the directory is not a Git repository, clone it; otherwise, pull the latest changes
            if [ ! -d ".git" ]; then
              echo "Directory is not a Git repository. Cloning repository..."
              # Replace the URL below with your repository URL
              git clone https://github.com/teetoflame/fastapi-book-project.git .
            else
              echo "Git repository found. Pulling latest changes..."
              git pull
            fi

            # Build the Docker image
            echo "Building the Docker image..."
            sudo docker build -t fastapi-app .

            # Stop and remove the existing container if it exists
            echo "Stopping and removing any existing container..."
            sudo docker stop fastapi-container || true
            sudo docker rm fastapi-container || true

            # Run the new container in detached mode, mapping port 8000
            echo "Starting the new Docker container..."
            sudo docker run -d --name fastapi-container -p 80:80 fastapi-app