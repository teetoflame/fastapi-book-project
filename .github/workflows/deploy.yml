name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t teeto-fastapi .

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 4: Tag Docker Image
      - name: Tag Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker tag teeto-fastapi ${{ secrets.DOCKER_USERNAME }}/teeto-fastapi:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # Step 5: Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/teeto-fastapi:${{ env.IMAGE_TAG }}

      # Step 6: Set up SSH key for EC2
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # Step 7: Deploy to EC2
      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -v -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            set -e  # Stop on errors

            # Add user to Docker group if not already added
            sudo usermod -aG docker $(whoami) || true

            # Pull the latest Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/teeto-fastapi:${{ env.IMAGE_TAG }}

            # Stop and remove any existing container
            sudo docker stop teeto-fastapi || true
            sudo docker rm teeto-fastapi || true

            # Run the new Docker container
            sudo docker run -d -p 8000:8000 --name teeto-fastapi ${{ secrets.DOCKER_USERNAME }}/teeto-fastapi:${{ env.IMAGE_TAG }}

            # Restart Nginx to pick up the new container
            sudo systemctl restart nginx
          EOF

      # Step 8: Check Nginx error log
      - name: Check Nginx error log
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            sudo tail -n 100 /var/log/nginx/error.log  # Tail last 100 lines of Nginx error log
          EOF

      # Step 9: Check Deployment Health (Make sure Nginx is serving FastAPI app)
      - name: Check Deployment Health
        run: |
          for i in {1..10}; do
            HTTP_STATUS=$(curl -sf -o /dev/null -w "%{http_code}" http://${{ secrets.DEPLOYMENT_URL }}/healthcheck)
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "App is healthy"
              exit 0
            else
              echo "Waiting for app... (status: $HTTP_STATUS)"
            fi
            sleep 5
          done
          echo "App failed to start" && exit 1

      # Step 10: Debug Logs on Failure
      - name: Debug Logs on Failure
        if: failure()
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -v -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # Show logs to help with debugging in case of failure
            docker logs teeto-fastapi
          EOF
